{
  "name": "juice2",
  "version": "1.3.1",
  "description": "Inlines css into html source",
  "bin": {
    "juice2": "./bin/juice"
  },
  "scripts": {
    "test": "mocha --reporter spec"
  },
  "engines": {
    "node": ">=0.10.20"
  },
  "dependencies": {
    "slick": "~1.12.1",
    "commander": "~2.3.0",
    "cssom": "~0.3.0",
    "superagent": "~0.18.2",
    "jsdom": "~0.11.1",
    "pend": "~1.1.2"
  },
  "devDependencies": {
    "should": "~4.0.4",
    "mocha": "~1.20.1",
    "expresso": "~0.9.2"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/andrewrk/juice.git"
  },
  "readme": "[![Build Status](https://travis-ci.org/andrewrk/juice.png?branch=master)](https://travis-ci.org/andrewrk/juice)\r\n# Juice ![](http://i.imgur.com/jN8Ht.gif)\r\n\r\nGiven HTML, juice will inline your CSS properties into the `style`\r\nattribute.\r\n\r\n## How to use\r\n\r\n```js\r\nvar juice = require('juice2');\r\njuice(\"/path/to/file.html\", function(err, html) {\r\n  console.log(html);\r\n});\r\n```\r\n\r\n`/path/to/file.html`:\r\n```html\r\n<html>\r\n<head>\r\n  <style>\r\n    p { color: red; }\r\n  </style>\r\n  <link rel=\"stylesheet\" href=\"style.css\">\r\n</head>\r\n<body>\r\n  <p>Test</p>\r\n</body>\r\n</html>\r\n```\r\n\r\n`style.css`\r\n```css\r\np {\r\n  text-decoration: underline;\r\n}\r\n```\r\n\r\nOutput:\r\n```html\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n  <p style=\"color: red; text-decoration: underline;\">Test</p>\r\n</body>\r\n</html>\r\n```\r\n\r\n## What is this useful for ?\r\n\r\n- HTML emails. For a comprehensive list of supported selectors see\r\n[here](http://www.campaignmonitor.com/css/)\r\n- Embedding HTML in 3rd-party websites.\r\n\r\n## Projects using juice\r\n\r\n* [node-email-templates][1] - Node.js module for rendering beautiful emails with [ejs][2] templates and email-friendly inline CSS using [juice][3].\r\n* [swig-email-templates][4] - Uses [swig][5], which gives you [template inheritance][6], and\r\n  can generate a [dummy context][7] from a template.\r\n\r\n[1]: https://github.com/niftylettuce/node-email-templates\r\n[2]: https://github.com/visionmedia/ejs\r\n[3]: https://github.com/LearnBoost/juice\r\n[4]: https://github.com/andrewrk/swig-email-templates\r\n[5]: https://github.com/paularmstrong/swig\r\n[6]: https://docs.djangoproject.com/en/dev/topics/templates/#template-inheritance\r\n[7]: https://github.com/andrewrk/swig-dummy-context\r\n\r\n## Documentation\r\n\r\n### juice(filePath, [options], callback)\r\n\r\n * `filePath` - html file\r\n * `options` - (optional) object containing these properties:\r\n   - `extraCss` - extra css to apply to the file. Defaults to `\"\"`.\r\n   - `applyStyleTags` - whether to inline styles in `<style></style>`\r\n     Defaults to `true`.\r\n   - `applyLinkTags` [Deprecated, use applyLinksToStyleTags] - whether to resolve `<link rel=\"stylesheet\">` tags\r\n     and inline the resulting styles into document `head`. Defaults to `true`.\r\n   - `applyLinksToStyleTags` - whether to resolve `<link rel=\"stylesheet\">` tags\r\n     and replace them with `style` tags. This works with `preserveMediaQueries` \r\n     unlike the deprecated `applyLinkTags`. Defaults to `true`.\r\n   - `removeStyleTags` - whether to remove the original `<style></style>`\r\n     tags after (possibly) inlining the css from them. Defaults to `true`.\r\n   - `preserveMediaQueries` - preserves all media queries (and contained styles) \r\n     within `<style></style>` tags as a refinement when `removeStyleTags` is `true`. \r\n     Other styles are removed. Defaults to `false`.\r\n   - `applyWidthAttributes` - whether to use any CSS pixel widths to create\r\n     `width` attributes on elements set in `juice.widthElements`\r\n   - `removeLinkTags` - whether to remove the original `<link rel=\"stylesheet\">`\r\n     tags after (possibly) inlining the css from them. Defaults to `true`.\r\n   - `url` - how to resolve hrefs. Defaults to using `filePath`. If you want\r\n     to override, be sure your `url` has the protocol at the beginning, e.g.\r\n     `http://` or `file://`.\r\n * `callback(err, html)`\r\n   - `err` - `Error` object or `null`.\r\n   - `html` - contains the html from `filePath`, with potentially `<style>` and\r\n     `<link rel=\"stylesheet\">` tags removed, and css inlined.\r\n\r\n### juice.juiceContent(html, options, callback)\r\n\r\n * `html` - raw html content\r\n * `options` - same options as calling `juice`, except now `url` is required.\r\n * `callback(err, html)` - same as calling `juice`\r\n\r\n### juice.juiceDocument(document, options, callback)\r\n\r\nOperates on a jsdom instance. Be sure to use the same jsdom version that juice\r\nuses. Also be sure to clean up after you are done. You may have to\r\ncall `document.parentWindow.close()` to free up memory.\r\n\r\n * `document` - a jsdom instance\r\n * `options` - see `juice.juiceContent`\r\n * `callback(err)`\r\n\r\n### juice.inlineContent(html, css)\r\n\r\nThis takes html and css and returns new html with the provided css inlined.\r\nIt does not look at `<style>` or `<link rel=\"stylesheet\">` elements at all.\r\n\r\n### juice.inlineDocument(document, css, options)\r\n\r\nGiven a jsdom instance and css, this modifies the jsdom instance so that the\r\nprovided css is inlined. It does not look at `<style>` or\r\n`<link rel=\"stylesheet\">` elements at all.\r\n\r\n### juice.ignoredPseudos\r\n\r\nArray of ignored pseudo-selectors such as 'hover' and 'active'.\r\n\r\n### juice.widthElements\r\n\r\nArray of HTML elements that can receive `width` attributes.\r\n\r\n### 3rd-party\r\n\r\n- Uses the excellent [JSDom](http://github.com/tmpvar/jsdom) for the underlying DOM\r\nrepresentation.\r\n- Uses [cssom](https://github.com/NV/CSSOM) to parse out CSS selectors and\r\n[Slick](http://github.com/subtleGradient/slick) to tokenize them.\r\n- Icon by [UnheardSounds](http://unheardsounds.deviantart.com/gallery/26536908#/d2ngozi)\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/andrewrk/juice/issues"
  },
  "homepage": "https://github.com/andrewrk/juice",
  "_id": "juice2@1.3.1",
  "dist": {
    "shasum": "f2499c55afaf32cce9da41240b5b7f6abcc3054e"
  },
  "_from": "juice2@",
  "_resolved": "https://registry.npmjs.org/juice2/-/juice2-1.3.1.tgz"
}
